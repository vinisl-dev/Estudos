# -*- coding: utf-8 -*-
"""Imersão Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j7Rb6VyvbttjiJ4ZQGqzxi0_D07otSdp
"""

#Aula 2 importação
!pip install mplfinance
#Lendo arquivos
import plotly.express as px
from plotly.subplots import make_subplots
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import mplfinance as mpf
import yfinance as yf
import plotly.graph_objects as go
from plotly.subplots import make_subplots

df_principal = pd.read_excel("/content/original  Imersão Python - Tabela de ações.xlsx", sheet_name="Principal")
df_principal.head(10)

df_total_acoes = pd.read_excel("/content/original  Imersão Python - Tabela de ações.xlsx", sheet_name="Total_de_acoes")
# df_total_acoes

df_ticker = pd.read_excel("/content/original  Imersão Python - Tabela de ações.xlsx", sheet_name="Ticker")
# df_ticker

df_chatgpt = pd.read_excel("/content/original  Imersão Python - Tabela de ações.xlsx", sheet_name="Chatgpt")
# df_chatgpt

# cria novo data frame com as colunas selecionadas
df_principal = df_principal[['Ativo','Data','Último (R$)','Var. Dia (%)']].copy()
df_principal

df_principal = df_principal.rename(columns={'Último (R$)':'Valor_final','Var. Dia (%)':'Var_dia_pct'}).copy()
df_principal

#cria uma nova coluna no Data frame
df_principal['Var_pct'] = df_principal['Var_dia_pct']/100
df_principal

df_principal['Valor_inicial'] = df_principal['Valor_final']/ (df_principal['Var_pct'] + 1)
df_principal

#unime colunas de um tabela a tabela principal
df_principal = df_principal.merge(df_total_acoes,left_on='Ativo', right_on='Código', how='left' )
df_principal

#exclui uma coluna
df_principal = df_principal.drop(columns=['Código'])
df_principal

df_principal['Variacao_rs'] = (df_principal['Valor_final'] - df_principal['Valor_inicial']) * df_principal['Qtde. Teórica']
df_principal

pd.options.display.float_format = '{:.2f}'.format
df_principal

df_principal['Qtde. Teórica']= df_principal['Qtde. Teórica'].astype(int)
df_principal

df_principal = df_principal.rename(columns={'Qtde. Teórica':'Qtd_teorica'}).copy()
# df_principal

df_principal['Resultado'] = df_principal['Variacao_rs'].apply(lambda x: 'Subiu' if x > 0 else ('Desceu' if x< 0 else 'Estável'))
# df_principal.head(50)

df_principal = df_principal.merge(df_ticker, left_on='Ativo', right_on='Ticker', how='left')
df_principal = df_principal.drop(columns=['Ticker'])
df_principal

df_principal = df_principal.merge(df_chatgpt, left_on='Nome', right_on='Nome da Empresa', how='left')
df_principal = df_principal.drop(columns=['Nome da Empresa'])
df_principal

df_principal['Cat_idade'] = df_principal['Idade'].apply(lambda x: 'Mais de 100' if x > 100 else ('Menos de 50' if x < 50 else 'Entre 50 e 100'))
df_principal

#Analises
maior = df_principal['Variacao_rs'].max()
menor = df_principal['Variacao_rs'].min()
media = df_principal['Variacao_rs'].mean()
media_subiu = df_principal[df_principal['Resultado'] == 'Subiu']['Variacao_rs'].mean()
media_desceu = df_principal[df_principal['Resultado'] == 'Desceu']['Variacao_rs'].mean()

#ao inserir uma coluna deve se especificar o nome de todas
analise = [['maior',maior], ['menor',menor], ['media',media], ['media subiu',media_subiu],['media desceu', media_desceu]]
df_analise = pd.DataFrame(analise, columns=['Analise',''])
df_analise

df_principal_subiu = df_principal[df_principal['Resultado'] == 'Subiu']
df_principal_subiu

#agregação
# grupby cria um vetor, reset transforma novamente em df
df_analise_segmento = df_principal_subiu.groupby('Segmento')['Variacao_rs'].sum().reset_index()
df_analise_segmento

df_analise_saldo = df_principal.groupby('Resultado')['Variacao_rs'].sum().reset_index()
df_analise_saldo

#graficos
fig = px.bar(df_analise_saldo, x='Resultado', y='Variacao_rs', text='Variacao_rs',title='Variação Reais por Resultado')
fig.show()

fig= px.pie(df_analise_segmento, names='Segmento', values='Variacao_rs', title='Variação Reais por Segmento')
fig.show()

df_analise_cat_idade = df_principal.groupby('Cat_idade')['Variacao_rs'].sum().reset_index()
df_analise_segmento

fig = px.bar(df_analise_cat_idade, x='Cat_idade', y='Variacao_rs', text='Variacao_rs', title='Variação Reais por Categoria de Idade')
fig.show()

dados_petro = yf.download('PETR4.SA', start='2023-01-01', end='2024-03-01')
#renomeando colunas
dados_petro.columns = ['Abertura', 'Maximo', 'Minimo', 'Fechamento', 'Fech_ajust','Volume']
dados_petro = dados_petro.rename_axis('Data')
dados_petro

dados_petro['Fechamento'].plot(figsize=(10,6))
plt.title('Variação do preço por data', fontsize=16)
plt.legend(['Fechamento'])

df_candle_petro=dados_petro.head(120).copy()
df_candle_petro['Data'] = df_candle_petro.index
df_candle_petro['Data'] = df_candle_petro['Data'].apply(mdates.date2num)
df_candle_petro

#fig éo grafico, ax o pincel que desenha o graficos
fig, ax = plt.subplots(figsize=(15,8))
width = .7
for i in range(len(df_candle_petro)):
  if df_candle_petro['Fechamento'].iloc[i] > df_candle_petro['Abertura'].iloc[i]:
    color = 'green'
  else:
    color = 'red'

  ax.plot([df_candle_petro['Data'].iloc[i], df_candle_petro['Data'].iloc[i]],
         [df_candle_petro['Minimo'].iloc[i], df_candle_petro['Maximo'].iloc[i]],
         color=color,
         linewidth=1)

  ax.add_patch(plt.Rectangle((df_candle_petro['Data'].iloc[i] - width/2, min(df_candle_petro['Abertura'].iloc[i], df_candle_petro['Fechamento'].iloc[i])),
    width,
    abs(df_candle_petro['Fechamento'].iloc[i] - df_candle_petro['Abertura'].iloc[i]),
    facecolor = color)),
#cria as medias moveis
#rooling faz a rolagem do periodo
df_candle_petro['MA7'] = df_candle_petro['Fechamento'].rolling(window=7).mean()
df_candle_petro['MA14'] = df_candle_petro['Fechamento'].rolling(window=14).mean()
#plota as linhas da media movel
ax.plot(df_candle_petro['Data'], df_candle_petro['MA7'], color='orange', label='Média Móvel 7 Dias')
ax.plot(df_candle_petro['Data'], df_candle_petro['MA14'], color='blue', label='Média Móvel 14 Dias')
#plota as legendas
ax.legend()
ax.xaxis_date()
ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
plt.xticks(rotation=45)

plt.title('Gráfico de Candlestick - Petr4 com matplotlib')
plt.xlabel('Data')
plt.ylabel('Preço')

plt.grid(True)
plt.show()

#grafico interativo

fig_petro = make_subplots(rows=2, cols=1, shared_xaxes= True,
      vertical_spacing=0.1,
      subplot_titles=('Candlesticks', 'Volume Transacionado'),
      row_width=[0.2, 0.7])

fig_petro.add_trace(go.Candlestick(
      x=df_candle_petro.index,
      open = df_candle_petro['Abertura'],
      high  =df_candle_petro['Maximo'],
      low = df_candle_petro['Minimo'],
      close = df_candle_petro['Fechamento'],
      name ='Candlestick'),
      row = 1, col = 1)

fig_petro.add_trace(go.Scatter(
    x= df_candle_petro.index,
    y= df_candle_petro['MA7'],
    mode= 'lines',
    name= 'MA7 - Média Móvel 7 Dias'),
    row= 1, col= 1)

fig_petro.add_trace(go.Scatter(
      x = df_candle_petro.index,
      y = df_candle_petro['MA14'],
      mode = 'lines',
      name = 'MA14 - Média Móvel 14 Dias'),
      row = 1, col = 1)

fig_petro.add_trace(go.Bar(
      x = df_candle_petro.index,
      y = df_candle_petro['Volume'],
      name = 'Volume'),
      row = 2, col = 1)

fig_petro.update_layout(
    yaxis_title='Preço',
    xaxis_rangeslider_visible=False,
    width = 1100, height = 600)

fig_petro.show()

dados = yf.download('PETR4.SA', start='2024-01-21', end='2024-03-29')
mpf.plot(dados.head(120), type='candle', figsize= (16,8), volume=True, mav=(7,14), style='yahoo')

dados = yf.download('AAPL', start='2023-01-01', end='2024-03-28')
mpf.plot(dados.head(50), type='candle', figsize=(20,10), volume=True, mav=(7,14))
# dados

# dia 5
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from prophet import Prophet

#prophet trabalha com series temporais
dados = yf.download("JNJ", start="2020-01-01", end="2023-12-31", progress=False)
dados = dados.reset_index()
dados

dados_treino = dados[dados['Date'] < '2023-07-31']
dados_teste = dados[dados['Date'] >= '2023-07-31']
dados_prophet_treino = dados_treino[['Date', 'Close']].rename(columns={'Date':'ds','Close':'y'})
dados_prophet_treino

#cria e treina o modelo
modelo = Prophet(weekly_seasonality= True,
                 yearly_seasonality= True,
                 daily_seasonality= False)
modelo.add_country_holidays(country_name='US')
modelo.fit(dados_prophet_treino)

#cria dtas futuras para previsao até final de 2023

futuro = modelo.make_future_dataframe(periods=150)
previsao = modelo.predict(futuro)
previsao

plt.figure(figsize=(14,8))
plt.plot(dados_treino['Date'], dados_treino['Close'], label='Dados de Treino', color= 'blue')
plt.plot(dados_teste['Date'], dados_teste['Close'], label='Dados Reais (Teste)', color='green')
plt.plot(previsao['ds'], previsao['yhat'], label='Previsão', color = 'orange', linestyle='--')

plt.axvline(dados_treino['Date'].max(), color='red', linestyle='--', label='Início da Previsão')
plt.xlabel('Data')
plt.ylabel('Preço de Fechamento')
plt.title('Previsão de Preço de Fechamento vs Dados Reais')
plt.legend()
plt.show()